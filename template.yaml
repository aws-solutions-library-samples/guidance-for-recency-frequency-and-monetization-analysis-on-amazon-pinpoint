AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Amazon Pinpoint RFM Predictive Marketing solution.
Parameters:
  PinpointRFMS3BucketName:
    Type: String
    Description: Amazon S3 bucket that stores artefacts and data for RFM analysis
    MaxLength: "63"
    AllowedPattern: ^[a-z0-9.-]*$
  PinpointRFMApplicationId:
    Type: String
    Description: Application ID of the Pinpoint project
  LogRetentionPeriod:
    Type: Number
    Default: 365
    Description: Days to keep application logs
    MinValue: 1
    MaxValue: 3650
Mappings:
  PublicScikitImages:
    us-west-1:
      AccountId: 746614075791
    us-west-2:
      AccountId: 246618743249
    us-east-1:
      AccountId: 683313688378
    us-east-2:
      AccountId: 257758044811
    ap-northeast-1:
      AccountId: 354813040037
    ap-northeast-2:
      AccountId: 366743142698
    ap-southeast-1:
      AccountId: 121021644041
    ap-southeast-2:
      AccountId: 783357654285
    ap-south-1:
      AccountId: 720646828776
    eu-west-1:
      AccountId: 141502667606
    eu-west-2:
      AccountId: 764974769150
    eu-central-1:
      AccountId: 492215442770
    ca-central-1:
      AccountId: 341280168497
    us-gov-west-1:
      AccountId: 414596584902
Resources:
  PinpointRFMUploadBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: "Bucket is blocked from public access."
          - id: W35
            reason: "Bucket does not require access logging."
    Properties:
      BucketName: !Ref PinpointRFMS3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LoggingConfiguration:
        LogFilePrefix: access-logs
      VersioningConfiguration:
        Status: Enabled
  PinpointRFMUploadBucketPolicy:
      DependsOn:
        - PinpointRFMUploadBucket
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref PinpointRFMUploadBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Condition:
                Bool:
                  'aws:SecureTransport': false
              Effect: Deny
              Principal: '*'
              Resource: !Sub 'arn:${AWS::Partition}:s3:::${PinpointRFMUploadBucket}/*'
              Sid: DenyUnencryptedConnections
  PinpointRFMUploadTrigger:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This application does not use any resources in a VPC."
          - id: W92
            reason: "This application does not require reserved concurrency."
    Properties:
      CodeUri: src/trigger
      Handler: handler.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Environment:
        Variables:
          STEPFUNCTION_ARN: !GetAtt PinpointRFMStateMachine.Arn
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt PinpointRFMStateMachine.Name
      Events:
        UploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref PinpointRFMUploadBucket
            Filter:
               S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
                  - Name: suffix
                    Value: .csv
            Events: s3:ObjectCreated:*
  PinpointRFMSegmentCreate:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This application does not use any resources in a VPC."
          - id: W92
            reason: "This application does not require reserved concurrency."
    Properties:
      CodeUri: src/segment
      Handler: create.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Environment:
        Variables:
          PINPOINT_APPLICATION_ID: !Ref PinpointRFMApplicationId
          AWS_ACCOUNT_ID: !Sub ${AWS::AccountId}
      Policies:
        - Statement:
          - Sid: PinpointRFMLambdaCreateSegmentJob
            Effect: Allow
            Action:
            - mobiletargeting:CreateSegment
            - mobiletargeting:GetApp
            - mobiletargeting:TagResource
            Resource: !Sub 'arn:${AWS::Partition}:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/${PinpointRFMApplicationId}'
  PinpointRFMStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: rfm.asl.json
      DefinitionSubstitutions:
        SagemakerRoleArn: !GetAtt SagemakerExecutionRole.Arn
        SagemakerRegion: !Sub ${AWS::Region}
        GlueJobName: !Join ['-', ['PinpointRFMPostprocessingJob', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
        PreprocessingJobScikitPath: !Sub
          - '${Base}.dkr.ecr.${AWS::Region}.amazonaws.com/sagemaker-scikit-learn:0.20.0-cpu-py3'
          - Base: !FindInMap [PublicScikitImages, !Ref AWS::Region, AccountId]
        ClusteringJobScikitPath: !Sub
          - '${Base}.dkr.ecr.${AWS::Region}.amazonaws.com/sagemaker-scikit-learn:0.23-1-cpu-py3'
          - Base: !FindInMap [PublicScikitImages, !Ref AWS::Region, AccountId]
        PinpointRFMImportEndpoints: !GetAtt PinpointRFMImportEndpoints.Arn
        PinpointRFMCreateSegments: !GetAtt PinpointRFMSegmentCreate.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt PinpointRFMStateMachineLogGroup.Arn
        IncludeExecutionData: false
      Role: !GetAtt PinpointRFMStateMachineExecutionRole.Arn
  PinpointRFMStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogRetentionPeriod 
  PinpointRFMPostprocessingJob:
    Type: AWS::Glue::Job
    Properties:
      GlueVersion: "3.0"
      Command:
        Name: glueetl
        ScriptLocation: !Sub 's3://${PinpointRFMS3BucketName}/code/postprocess/merge.py'
      # DefaultArguments:
      #   "--job-bookmark-option": "job-bookmark-enable"
      ExecutionProperty:
        MaxConcurrentRuns: 1
      MaxRetries: 0
      Name: !Join ['-', ['PinpointRFMPostprocessingJob', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      Role: !GetAtt PinpointRFMGlueExecutionRole.Arn
  PinpointRFMImportEndpoints:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This application does not use any resources in a VPC."
          - id: W92
            reason: "This application does not require reserved concurrency."
    Properties:
      CodeUri: src/upload
      Handler: endpoints.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Environment:
        Variables:
          PINPOINT_APPLICATION_ID: !Ref PinpointRFMApplicationId
          PINPOINT_IMPORT_ROLE_ARN: !GetAtt PinpointEndpointImportRole.Arn
      Policies:
        - Statement:
          - Sid: PinpointRFMLambdaCreateImportJob
            Effect: Allow
            Action:
            - mobiletargeting:CreateImportJob
            Resource: !Sub 'arn:${AWS::Partition}:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/${PinpointRFMApplicationId}'
        - Statement:
          - Sid: PinpointRFMLambdaCreateImportJobPassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource:
              - !GetAtt PinpointEndpointImportRole.Arn
        - Statement:
          - Sid: PinpointRFMLambdaCreateImportJobAssumeRole
            Effect: Allow
            Action:
            - sts:AssumeRole
            Resource: !GetAtt PinpointEndpointImportRole.Arn
  PinpointRFMStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: IAM execution role for Step Functions
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join ['-', ['PinpointRFMStateMachinePolicy', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - sagemaker:CreateProcessingJob
                  - sagemaker:CreateTrainingJob
                  - sagemaker:AddTags
                  - iam:PassRole
                  - glue:StartJobRun
                  - glue:GetJobRun
                  - lambda:InvokeFunction
                Resource:
                  - !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForSageMakerTrainingJobsRule'
                  - !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForSageMakerProcessingJobsRule'
                  - !Sub 'arn:${AWS::Partition}:sagemaker:${AWS::Region}:${AWS::AccountId}:processing-job/RFM-Processing-*'
                  - !Sub 'arn:${AWS::Partition}:sagemaker:${AWS::Region}:${AWS::AccountId}:training-job/RFM-Clustering-*'
                  - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/PinpointRFMPostprocessingJob-*'
                  - !GetAtt PinpointRFMImportEndpoints.Arn
                  - !GetAtt PinpointRFMSegmentCreate.Arn
                  - !GetAtt SagemakerExecutionRole.Arn
        - PolicyName: !Join ['-', ['PinpointRFMStateMachinePolicyCloudwatch', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:*:*:*
                  - !Sub arn:${AWS::Partition}:cloudwatch:*:*:*
  SagemakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: IAM execution role for Sagemaker
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join ['-', ['PinpointRFMSagemakerPolicyS3', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${PinpointRFMS3BucketName}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${PinpointRFMS3BucketName}'
        - PolicyName: !Join ['-', ['PinpointRFMSagemakerPolicyCloudwatch', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:*:*:*
                  - !Sub arn:${AWS::Partition}:cloudwatch:*:*:*
  PinpointRFMGlueExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Join ['-', ['PinpointRFMGlueExecutionPolicyS3', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetBucketAcl
                  - s3:DeleteObject
                  - s3:DeleteObjects
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${PinpointRFMS3BucketName}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${PinpointRFMS3BucketName}/*'
        - PolicyName: !Join ['-', ['PinpointRFMGlueExecutionPolicyCloudwatch', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:*:*:*
                  - !Sub arn:${AWS::Partition}:cloudwatch:*:*:*
  PinpointEndpointImportRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - pinpoint.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Join ['-', ['PinpointSegmentImportRolePolicy', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3-object-lambda:Get*
                  - s3-object-lambda:List*
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${PinpointRFMS3BucketName}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${PinpointRFMS3BucketName}/*'
